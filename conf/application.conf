
election {
  nodes = ["127.0.0.1:2182"]
  akka.remote.netty.tcp.port = 2182
}

cluster {
  nodes = ["127.0.0.1:2190"]
  akka.remote.netty.tcp.port = 2190

  # To ease the debug
  soft-work-distribution-ms = 10000
}

play.akka.actor-system = "test-system"
application.secret = "changethissosomethingsecret"
akka {
  loggers = [ "akka.event.slf4j.Slf4jLogger" ]
  loglevel = "DEBUG"

  log-dead-letters = 0
  log-dead-letters-during-shutdown = true

  actor {
    provider = "akka.remote.RemoteActorRefProvider"
    warn-about-java-serializer-usage = false
  }

  remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      hostname = "127.0.0.1"
      port = 2210
    }
  }
}

filesgate {

  internal {
    pipeline.timeout-step-ms = 20000 # 120000 ms would be more reasonable. Set a small value for debugging
  }

  # List of the different pipelines we want to have
  pipelines {
    # Name of the pipeline as key
    example {
      message-distributor = "net.degols.libs.filesgate.core.messagedistributor.IPMessageDistributor"

      steps = [
        # Where should we fetch the data? This step is the only one mandatory, but, you can use a default one already existing, with the
        # proper configuration in "default-steps"
        {type: "datasource", name:"source", priority:1, balancer.max-instances:1},
        {type: "datasource", name:"sourceTwo", priority:100, balancer.max-instances:1},

        # To detect if the current pipeline should be used with a given message
        {type: "matcher", name:"matcher", balancer.max-instances:1},
        {type: "matcher", name:"matcherTwo", balancer.max-instances:1},

        #{type: "predownload",name: "preDownload", balancer.max-instances: 1},
        {type: "download",name: "download", directory:"./downloads", balancer.max-instances: 2},# If 'directory' is not specified, we download file in-memory.
        #{type: "prestorage", name: "preStorage", balancer.max-instances: 1},
        #{type: "storage", name: "Core.Storage", db-service: "Core.MongoContent", balancer.max-instances: 1},

        #{type: "poststorage",name: "postStorage", balancer.max-instances: 1}
        {type: "metadata",name: "Core.Metadata", db-service: "Core.MongoMetadata", balancer.max-instances: 1},
        #{type: "postmetadata",name: "postMetadata", balancer.max-instances: 1},
        {type: "failurehandling",name: "Core.FailureHandling", db-service: "Core.MongoMetadata", balancer.max-instances: 1}

      ]

      pipeline-instance {
        quantity = 1
      }

      restart-when-finished = false
    }
  }
}

# More general configuration
play.http.forwarded.trustedProxies = ["0.0.0.0/0", "::/0"]
play.http.secret.key = "changeme"
play.i18n {
  langs = [ "en" ]
}

